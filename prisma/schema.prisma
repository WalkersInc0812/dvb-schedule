// --------------------------------------------------
// Settings
// --------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --------------------------------------------------
// Next Auth
// --------------------------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map(name: "verification_tokens")
}

// 学童保育の保護者、職員、管理者
model User {
  // Next Auth
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  sessions Session[]
  accounts Account[]

  // Application
  role String @default("PARENT") // PARENT | STAFF | SUPER_STAFF // TODO: enumにしたい

  // TODO: PARENTもfacilityが複数の場合もある？PARENTはfacilityを持つのではなく、studentにだけ紐づける？
  facilities   Facility[] // PARENTの場合は1つ。STAFFの場合は基本1つだが複数の施設を担当する場合がありそう。SUPER_STAFFの場合は全ての施設を管理するので指定しない。
  students     Student[] // PARENTの場合のみ。複数の子供を通わせる場合がある。
  scheduleLogs ScheduleLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "users")
}

// --------------------------------------------------
// Application
// --------------------------------------------------
// 学童保育の施設(教室)
model Facility {
  id   String @id @default(cuid())
  name String

  users                   User[]
  students                Student[]
  mealSettings            MealSetting[]
  scheduleEditablePeriods ScheduleEditablePeriod[]
  announcements           Announcement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "facilities")
}

// 学童保育の施設の給食設定
model MealSetting {
  id             String @id @default(cuid())
  facilityId     String
  activeFromDate String // yyyy-MM-dd
  activeToDate   String // yyyy-MM-dd

  facility Facility @relation(fields: [facilityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "meal_settings")
}

// TODO: ScheduleMonthlySetting の方がいいかも
// 学童保育の施設の編集可能期間
model ScheduleEditablePeriod {
  id          String @id @default(cuid())
  facilityId  String
  targetMonth String // yyyy-MM
  fromDate    String // yyyy-MM-dd
  toDate      String // yyyy-MM-dd

  facility Facility @relation(fields: [facilityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "schedule_editable_periods")
}

// 学童保育の施設のお知らせ
model Announcement {
  id                String @id @default(cuid())
  facilityId        String
  content           String
  displayStartMonth String // yyyy-MM
  displayEndMonth   String // yyyy-MM

  facility Facility @relation(fields: [facilityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "announcements")
}

// 学校
model School {
  id   String @id @default(cuid())
  name String

  classes  Class[]
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "schools")
}

// 学校のクラス(教室)
model Class {
  id           String @id @default(cuid())
  schoolId     String
  academicYear Int // 年度
  name         String
  grade        Int

  school   School    @relation(fields: [schoolId], references: [id])
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "classes")
}

// 学童保育の生徒
model Student {
  id                           String @id @default(cuid())
  parentId                     String
  schoolId                     String
  facilityId                   String
  name                         String
  schoolEnrollmentAcademicYear Int // 学校への入学年度

  parent               User                  @relation(fields: [parentId], references: [id])
  facility             Facility              @relation(fields: [facilityId], references: [id])
  school               School                @relation(fields: [schoolId], references: [id])
  classes              Class[] // TODO: 未確定の場合どうする？
  schedules            Schedule[]
  fixedUsageDayOfWeeks FixedUsageDayOfWeek[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "students")
}

// 学童保育の生徒の予定
// TODO: date: yyyy-MM-dd, startTime: HH:mm, endTime: HH:mm の方がいいかも
model Schedule {
  id        String   @id @default(cuid())
  studentId String
  start     DateTime
  end       DateTime
  meal      Boolean  @default(false)
  notes     String?

  student Student       @relation(fields: [studentId], references: [id])
  logs    ScheduleLog[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map(name: "schedules")
}

// 生徒の予定の操作ログテーブル
// TODO: パフォーマンスを上げる必要があれば、indexを貼る
model ScheduleLog {
  id         String @id @default(cuid())
  scheduleId String
  userId     String
  operation  String // 'CREATE' | 'UPDATE' | 'DELETE' // TODO: enumにしたい

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  timestamp DateTime @default(now())

  @@map(name: "schedule_logs")
}

// 習い事
model Program {
  id        String  @id @default(cuid())
  name      String
  shortName String?

  fixedUsageDaysOfWeek1 FixedUsageDayOfWeek[] @relation("program_fixed_usage_days_of_week_1")
  fixedUsageDaysOfWeek2 FixedUsageDayOfWeek[] @relation("program_fixed_usage_days_of_week_2")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "programs")
}

// 月毎の固定利用曜日
model FixedUsageDayOfWeek {
  id                String  @id @default(cuid())
  studentId         String
  month             String // yyyy-MM
  dayOfWeek         Int // 0: 日曜日, 1: 月曜日, ..., 6: 土曜日
  startTime         String? // HH:mm
  endTime           String? // HH:mm
  needPickup        Boolean // 学校へのお迎えが必要かどうか
  program1Id        String?
  program1StartTime String? // HH:mm
  program1EndTime   String? // HH:mm
  program2Id        String?
  program2StartTime String? // HH:mm
  program2EndTime   String? // HH:mm

  student  Student  @relation(fields: [studentId], references: [id])
  program1 Program? @relation("program_fixed_usage_days_of_week_1", fields: [program1Id], references: [id])
  program2 Program? @relation("program_fixed_usage_days_of_week_2", fields: [program2Id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "fixed_usage_day_of_weeks")
}
